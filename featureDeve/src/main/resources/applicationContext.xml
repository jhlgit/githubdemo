<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

    <!-- 读取db.properties配置信息 -->
    <!--<context:property-placeholder location="classpath:application.properties" ignore-unresolvable="true"></context:property-placeholder>-->
    <!-- 配置c3p0数据源 -->
<!--    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="driverClass" value="${db.driver}" />
        <property name="jdbcUrl" value="${db.url}" />
        <property name="user" value="${db.user}" />
        <property name="password" value="${db.password}" />
    </bean>-->

<!--    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        &lt;!&ndash; 注入连接池 给 sqlsessionFactory 的属性 dataSource 赋值 ref="引用该 spring容器 中的另一个 bean的id" &ndash;&gt;
        <property name="dataSource" ref="dataSource"/>
        &lt;!&ndash; 别名 &ndash;&gt;
        &lt;!&ndash;<property name="typeAliasesPackage" value="com.jhl.entity"></property>&ndash;&gt;
        &lt;!&ndash; 注入 映射文件 mapper给 sqlsessionFactory 的属性 mapperLocation 赋值 value="映射文件 XXXmapper.xml 的相对路径" &ndash;&gt;
        <property name="mapperLocations" value="classpath:mapper/*.xml"/>
    </bean>-->



    <!-- 3) 获取 SqlSession 对象，并交由 spring 管理  用SqlSessionTemplate得到的SqlSession可以不用我们自己操心事务的管理，以及关闭操作-->
<!--    <bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
        &lt;!&ndash; 给 SqlSessionTemplate 的构造函数赋值&ndash;&gt;
        <constructor-arg index="0" ref="sqlSessionFactory" />
    </bean>-->

    <!--5 声明式事务管理 -->
    <!--定义事物管理器，由spring管理事务 -->
<!--    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"></property>
    </bean>-->
    <!--支持注解驱动的事务管理，指定事务管理器 -->
    <!--<tx:annotation-driven transaction-manager="transactionManager"/>-->

    <!-- 下面使用aop切面的方式来实现 -->
    <tx:advice id="TestAdvice" transaction-manager="transactionManager">
        <!--配置事务传播性，隔离级别以及超时回滚等问题 -->
        <tx:attributes>
            <tx:method name="save*" propagation="REQUIRED" />
            <tx:method name="del*" propagation="REQUIRED" />
            <tx:method name="update*" propagation="REQUIRED" />
            <tx:method name="add*" propagation="REQUIRED" />
            <tx:method name="noTx*" propagation="NEVER" />
            <tx:method name="*" rollback-for="Exception" />
        </tx:attributes>
    </tx:advice>

    <aop:config>
        <!--配置事务切点 -->
        <aop:pointcut id="services" expression="execution(* com.jhl.service.*.*(..))" />
        <aop:advisor pointcut-ref="services" advice-ref="TestAdvice" />
    </aop:config>
</beans>